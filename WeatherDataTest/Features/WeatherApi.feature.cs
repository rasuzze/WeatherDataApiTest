// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace WeatherDataApiTest.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class OpenWeatherMapAPITestingFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "OpenWeatherMap API Testing", "As a weather application user\r\nI want to get current weather data\r\nSo that I can " +
                "make informed decisions", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "WeatherApi.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async global::System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 6
    #line hidden
#line 7
        await testRunner.GivenAsync("I have access to the OpenWeatherMap API", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Successful weather request")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "OpenWeatherMap API Testing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("London", "London", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("São Paulo", "São Paulo", null)]
        public async global::System.Threading.Tasks.Task SuccessfulWeatherRequest(string city, string expected_City, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("city", city);
            argumentsOfScenario.Add("expected_city", expected_City);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Successful weather request", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
    await this.FeatureBackgroundAsync();
#line hidden
#line 10
        await testRunner.GivenAsync("I have a valid API key", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 11
        await testRunner.WhenAsync(string.Format("I request weather for {0}", city), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 12
        await testRunner.ThenAsync("I should get a successful response", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 13
        await testRunner.AndAsync("the response should contain weather data", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
        await testRunner.AndAsync(string.Format("the city name should be {0}", expected_City), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Request with invalid, unknown, or empty city")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "OpenWeatherMap API Testing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("invalid", "London", "unauthorized", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("valid", "NonExistentCity123", "not found", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("valid", "", "bad request", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("valid", "!@#$%^&*()", "not found", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("valid", "123456", "not found", null)]
        public async global::System.Threading.Tasks.Task RequestWithInvalidUnknownOrEmptyCity(string api_Key_Type, string city, string status, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("api_key_type", api_Key_Type);
            argumentsOfScenario.Add("city", city);
            argumentsOfScenario.Add("status", status);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Request with invalid, unknown, or empty city", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
    await this.FeatureBackgroundAsync();
#line hidden
#line 22
        await testRunner.GivenAsync(string.Format("I have a {0} API key", api_Key_Type), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 23
        await testRunner.WhenAsync(string.Format("I request weather for {0}", city), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 24
        await testRunner.ThenAsync(string.Format("I should get a {0} response", status), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 25
        await testRunner.AndAsync("the response should contain error message", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get weather by coordinates")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "OpenWeatherMap API Testing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("51.5074", "-0.1278", "successful", "weather data", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("90", "180", "successful", "weather data", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("91", "0", "bad request", "error message", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("-91", "0", "bad request", "error message", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("0", "181", "bad request", "error message", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("abc", "10", "bad request", "error message", null)]
        public async global::System.Threading.Tasks.Task GetWeatherByCoordinates(string latitude, string longitude, string status, string data, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("latitude", latitude);
            argumentsOfScenario.Add("longitude", longitude);
            argumentsOfScenario.Add("status", status);
            argumentsOfScenario.Add("data", data);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Get weather by coordinates", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
    await this.FeatureBackgroundAsync();
#line hidden
#line 36
        await testRunner.GivenAsync("I have a valid API key", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 37
        await testRunner.WhenAsync(string.Format("I request weather with coordinates lat {0} and lon {1}", latitude, longitude), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 38
        await testRunner.ThenAsync(string.Format("I should get a {0} response", status), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 39
        await testRunner.AndAsync(string.Format("the response should contain {0}", data), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get weather with different units")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "OpenWeatherMap API Testing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("London", "metric", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Paris", "imperial", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Tokyo", "standard", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Rome", "xxx", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("São Paulo", "", null)]
        public async global::System.Threading.Tasks.Task GetWeatherWithDifferentUnits(string city, string units, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("city", city);
            argumentsOfScenario.Add("units", units);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Get weather with different units", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 50
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
    await this.FeatureBackgroundAsync();
#line hidden
#line 51
        await testRunner.GivenAsync("I have a valid API key", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 52
        await testRunner.WhenAsync(string.Format("I request the weather for {0} in {1} units", city, units), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 53
        await testRunner.ThenAsync("I should get a successful response", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 54
        await testRunner.AndAsync("the response should contain weather data", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 55
        await testRunner.AndAsync(string.Format("the temperature should be in the correct unit for {0}", units), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
